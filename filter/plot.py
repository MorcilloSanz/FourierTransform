"""
Plots the sampled signal, the filtered signal and the residues signal.
It reads them from the files generated by filter.cc

Use run.sh in order to compile execute and then plot automatically.
"""
import os

import numpy as np
import matplotlib.pyplot as plt


def read_data(file: str) -> np.array:
    """
    Reads a sequence from a file and returns it as a numpy array.

    Args:
        file: file path.

    Returns:
        The sequence as a numpy array.
    """
    with open(file, 'r') as file:
        line = file.readline().strip()
        data = [float(value) for value in line.split()]

    return np.array(data)


def remove_files() -> None:
    """
    Remove plot files.
    """
    os.remove("signal.txt")
    os.remove("filtered_signal.txt")
    os.remove("fti.txt")
    os.remove("ftr.txt")
    os.remove("dom.txt")


if __name__ == "__main__":
    
    # Read signals
    signal: np.array = read_data("signal.txt")

    filtered_signal: np.array = read_data("filtered_signal.txt")
    residues: np.array = signal - filtered_signal

    fourier_transform_real: np.array = read_data("ftr.txt")
    fourier_transform_imag: np.array = read_data("fti.txt")

    dom: np.array = read_data("dom.txt")

    # Plot
    t0: float = dom[0]
    t1: float = dom[1]
    t = np.linspace(t0, t1, len(signal))

    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 6)) 

    # Filtered signal
    ax[0].plot(t, signal, label='signal')
    ax[0].plot(t, filtered_signal, label='filtered_signal')
    ax[0].plot(t, residues, label='residues')

    ax[0].set_title('signal = filtered_signal + residues')
    ax[0].set_xlabel('t')
    ax[0].set_ylabel('A')

    ax[0].legend()

    # Fourier transform
    freq0: float = dom[2]
    freq1: float = dom[3]
    f = np.linspace(freq0, freq1 / 2, len(signal) // 2)

    ax[1].plot(f, fourier_transform_real[:len(signal) // 2], label='real')
    ax[1].plot(f, fourier_transform_imag[:len(signal) // 2], label='imag')

    ax[1].set_title(f'Fourier transform of signal')
    ax[1].set_xlabel('f')
    ax[1].set_ylabel('M')

    ax[1].legend()

    ax[1].text(0.5, 0.9, f'Sample frequency: fs = {freq1}', transform=ax[1].transAxes,
           fontsize=12, ha='center', bbox=dict(facecolor='white', alpha=0.8))
    
    ax[1].text(0.5, 0.8, f'Nyquist frequency: fN = fs / 2 = {freq1 / 2}', transform=ax[1].transAxes,
           fontsize=12, ha='center', bbox=dict(facecolor='white', alpha=0.8))

    plt.tight_layout()
    plt.show()

    # Remove files
    remove_files()
